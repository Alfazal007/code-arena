generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  username    String        @unique
  password    String
  isPremium   Boolean       @default(false)
  userProblem UserProblem[]
  leaderBoard LeaderBoard[]
  role        Role          @default(USER)
}

model Problems {
  id                  String        @id @default(uuid())
  testCases           Int
  name                String        @unique
  halfCodeRust        String
  fullCodeRust        String
  inputTakingCodeRust String
  inputTakingCodeJS   String
  halfCodeJS          String
  fullCodeJS          String
  problemDescription  String
  userProblem         UserProblem[]
  contest             Contest[]
}

model UserProblem {
  id                 String   @id @default(uuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId          String
  createdAt          DateTime @default(now())
  Problems           Problems @relation(fields: [problemId], references: [id], onDelete: Cascade)
  isCompleted        Boolean  @default(false)
  isErrorPresent     Boolean  @default(false)
  errorMessage       String   @default("")
  completedTestCases Int      @default(0)
  testcaseStatus     Json     @default("[]")
}

model Contest {
  id           String        @id @default(uuid())
  started      Boolean       @default(false)
  completed    Boolean       @default(false)
  problemId    String
  createdAt    DateTime      @default(now())
  Problems     Problems      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  leaderBoards LeaderBoard[]
}

model LeaderBoard {
  id        String  @id @default(uuid())
  contestId String
  Contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rank      Int     @default(0)
  points    Int     @default(0)

  @@unique([contestId, userId])
}
